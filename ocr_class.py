# -*- coding: utf-8 -*-
"""OCR_class.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HrXvcGTozeELN_4fsn-D2SlX7zbVMGHE
"""


import keras_ocr
import matplotlib.pyplot as plt
import tensorflow as tf
from spellchecker import SpellChecker
from fuzzywuzzy import fuzz


class OCR :
  def __init__(self):
    self.pipeline = keras_ocr.pipeline.Pipeline()
    self.spell = SpellChecker()
    self.fuzzy = fuzz


  def read_images(self, image_path):
    images = [keras_ocr.tools.read(image_path)]
    return images

  def recognize_text(self, images):
    prediction_groups = self.pipeline.recognize(images)
    return prediction_groups

  def plot_predictions(self, images, prediction_groups):
    fig, axs = plt.subplots(nrows=len(images), figsize=(10, 20))
    for ax, image, predictions in zip(axs, images, prediction_groups):
      keras_ocr.tools.drawAnnotations(image=image, predictions=predictions, ax=ax)

  def get_text(self, prediction_groups_part):
    texts = []
    info_image = prediction_groups_part
    for text, box in info_image :
      texts.append(text)
    return texts


  def similarity_word(self, word, corrected_word):
    return self.fuzzy.ratio(word, corrected_word) / 100.0

  def correct_spelling(self, text, language):
    spell = self.spell(language=language)
    words = text.split()
    corrected_words = []
    similarity_words = []

    for word in words:
        corrected_word = spell.correction(word)
        similarity = self.similarity_word(word, corrected_word)

        # Vérifie si le mot corrigé n'est pas None et est de type str
        if corrected_word is not None and isinstance(corrected_word, str):
          corrected_text = " ".join(corrected_words)
          if corrected_text == '' :
            similarity = 0

          corrected_words.append(corrected_text)
          similarity_words.append(similarity)


    corrected_text = " ".join(corrected_words)
    if corrected_text == '' :
      similarity = 0
    else :
      similarity = max(similarity_words)

    return corrected_text, similarity

  def get_all(self, texts):
    Mots = []
    score = []
    donnees = []

    for i in range(len(texts)) :
      corrected_text_1, similarity_score_1 = self.correct_spelling(texts[i], 'en')  # Appel de la fonction pour corriger le texte
      corrected_text_2, similarity_score_2 = self.correct_spelling(texts[i], 'fr')

      if similarity_score_1 > similarity_score_2 :
        corrected_text = corrected_text_1
        similarity_score = similarity_score_1
      else :
        corrected_text = corrected_text_2
        similarity_score = similarity_score_2

      Mots.append(corrected_text)
      score.append(similarity_score)

    for i,j,k in zip(texts, Mots, score) :
      lien = (i, j, k)
      donnees.append(lien)

    return donnees

  def all_in_one_OCR(self, image_path):
    all_infos = {}
    images = self.read_images(image_path)
    prediction_groups = self.recognize_text(images)
    n = len(prediction_groups)
    for i in range(n) :
      texts = self.get_text(prediction_groups[i])
      donnees = self.get_all(texts)
      all_infos[f"Image {i}"] = donnees
    return all_infos


img1 = tf.keras.utils.get_file(
'img1.jpg',
'https://prod.cdn-medias.jeuneafrique.com/cdn-cgi/image/q=auto,f=auto,metadata=none,width=1215,fit=cover/https://prod.cdn-medias.jeuneafrique.com/medias/2021/01/12/jad20210112-ass-cameroun-carte-identite.jpg')



# Création d'une instance de la classe OCR
ocr_instance = OCR()

# Appel de la méthode all_in_one_OCR avec l'image img1
resultat = ocr_instance.all_in_one_OCR(img1)

# Affichage du résultat
print(resultat)

